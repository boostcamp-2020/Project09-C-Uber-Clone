type Query {
  driver(email: String!): Driver
} 

type Mutation {
  loginDriver(email: String!, password: String!): LoginResult

  createDriver(
    email: String!,
    name: String!,
    password: String!,
    phoneNumber: String!,
    carType: String!,
    plateNumber: String!,
    description: String,
    profileImage: String
  ): Driver
  
  sendResponse(
    response: String!, 
    riderId: ID!,
    tripId: ID!
  ): String

  driverStateNotify(
    tripId: String
    driverPosition: DriverPositionInput
    isDrop: Boolean
  ): driverStateNotify

  updateDriverPosition(
    lat:Float, lng:Float
  ): Result
}

type Subscription {
  driverListen: driverListenResult

  matchedDriverState(tripId: ID!): driverStateNotify
}

type Driver {
  id: ID!
  email: String!
  name: String!
  password: String!
  phoneNumber: String!
  carType: String!
  plateNumber: String!
  description: String
  profileImage: String
}

type LoginResult {
  success: Boolean!
  message: String
  name: String
  role: String!
  token: String
}

input DriverPositionInput {
  lat: Float
  lng: Float
}

type driverStateNotify {
  tripId: String
  driverPosition: Position
  isDrop: Boolean
}

type Position {
  lat: Float
  lng: Float
}

type driverListenResult{
  trip: Trip!
  driverIds: [String]
}

type Result {
  result: String
}
